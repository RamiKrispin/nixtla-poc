---
title: "US48 Demand for Electricity Forecast"
format:
  html:
    code-fold: true
jupyter: python3
---

## Load Libraries
```{python}
import pandas as pd
import datetime
import plotly.graph_objects as go
from statistics import mean

from statsforecast import StatsForecast

from statsforecast.models import (
    DynamicOptimizedTheta,
    SeasonalNaive,
    AutoARIMA,
    HoltWinters,
    MSTL
)

from utilsforecast.plotting import plot_series
from mlforecast import MLForecast


from mlforecast.target_transforms import Differences
from mlforecast.utils import PredictionIntervals
from window_ops.expanding import expanding_mean
from lightgbm import LGBMRegressor
from xgboost import XGBRegressor
from sklearn.linear_model import LinearRegression

```


## Load the Data

Reformat the data

```{python}
data = pd.read_csv("data/us48.csv")
data["period"] = pd.to_datetime(data["period"])

end = data["period"].max().floor(freq = "d") - datetime.timedelta(hours = 1)

data = data[data["period"] <= end]
data.tail()

data = data[["period", "value"]]
data = data.sort_values("period")
data.to_csv("data/data.csv", index = False)

```

```{python}
ts = pd.read_csv("data/data.csv")
ts.head()
```

```{python}
ts.dtypes
```


```{python}
ts["period"] = pd.to_datetime(ts["period"])
ts = ts.sort_values("period")
ts = ts.rename(columns = {"period": "ds", "value": "y"})
ts["unique_id"] = 1
ts.head()
```




```{python}
end = ts["ds"].max()
start = end - datetime.timedelta(hours = 24 * 31 * 25)
ts = ts[ts["ds"] >= start]


from utilsforecast.plotting import plot_series

plot_series(ts)
```



```{python}
test_length = 72

train_end = end  - datetime.timedelta(hours = test_length)


train = ts[ts["ds"] <= train_end]
test = ts[ts["ds"] > train_end]

plot_series(test)
```



```{python}
auto_arima = AutoARIMA()
s_naive = SeasonalNaive(season_length=24)
theta =  DynamicOptimizedTheta(season_length= 24)
mstl1 = MSTL(
    season_length=[24, 24 * 7], 
    trend_forecaster=AutoARIMA(),
    alias="MSTL_ARIMA_trend"
)

mstl2 = MSTL(
    season_length=[24, 24 * 7], 
    trend_forecaster= HoltWinters(),
    alias="MSTL_HW_trend" 
)





stats_models = [
   auto_arima,
   s_naive,
   theta,
   mstl1,
   mstl2
]



sf = StatsForecast( 
    models=stats_models,
    freq="h", 
    fallback_model = AutoARIMA(),
    n_jobs= -1,
)


forecast_stats = sf.forecast(df=train, h=72, level=[95])
forecast_stats.head()
```


```{python}
#| width: 2000px
sf.plot(test, forecast_stats, models = ["AutoARIMA"], level=[95])
sf.plot(test, forecast_stats, engine = "plotly", level=[95]).update_layout(height=400)
```







```{python}
ml_models = [LGBMRegressor(), XGBRegressor(), LinearRegression()]

mlf = MLForecast(
    models= ml_models,  
    freq='h',  
    lags= [1,2,3, 24, 48, 24 * 7],  
    lag_transforms = {
        1:  [expanding_mean],  
    },
    date_features=['month', 'day', 'dayofweek', 'week', 'hour']
)



mlf.fit(df = train,  
        fitted = True, 
        prediction_intervals = PredictionIntervals(n_windows=3, 
                                                   h=72, 
                                                   method="conformal_distribution" ))

ml_forecast = mlf.predict(72, level  = [95])

ml_forecast
```





```{python}
fc = forecast_stats.merge(test, how = "left", on = "ds").merge(ml_forecast, how = "left", on = "ds")


def mape(y, yhat):
    mape = mean(abs(y - yhat)/ y) 
    return mape

def rmse(y, yhat):
    rmse = (mean((y - yhat) ** 2 )) ** 0.5
    return rmse

def coverage(y, lower, upper):
    coverage = sum((y <= upper) & (y >= lower)) / len(y)
    return coverage


fc_performance = None

for i in ["AutoARIMA", "SeasonalNaive", "DynamicOptimizedTheta", "MSTL_ARIMA_trend", "MSTL_HW_trend", "LGBMRegressor", "XGBRegressor", "LinearRegression"]:
    m = mape(y = fc.y, yhat = fc[i])
    r = rmse(y = fc.y, yhat = fc[i])
    c = coverage(y = fc.y, lower = fc[i + "-lo-95"], upper = fc[i + "-hi-95"])

    perf = {"model": i,
            "mape": m,
            "rmse": r,
            "coverage": c}
    if fc_performance is None:
        fc_performance = pd.DataFrame([perf])
    else:
        fc_performance = pd.concat([fc_performance, pd.DataFrame([perf])])

fc_performance.sort_values("rmse")
```



```{python}
fc = forecast_stats.merge(test, how = "left", on = "ds")
fc_performance = None

for i in ["AutoARIMA", "SeasonalNaive", "DynamicOptimizedTheta", "MSTL_ARIMA_trend", "MSTL_HW_trend"]:
    m = mape(y = fc.y, yhat = fc[i])
    r = rmse(y = fc.y, yhat = fc[i])
    c = coverage(y = fc.y, lower = fc[i + "-lo-95"], upper = fc[i + "-hi-95"])

    perf = {"model": i,
            "mape": m,
            "rmse": r,
            "coverage": c}
    if fc_performance is None:
        fc_performance = pd.DataFrame([perf])
    else:
        fc_performance = pd.concat([fc_performance, pd.DataFrame([perf])])

fc_performance.sort_values("rmse")

```




```{python}
sf.plot(test, forecast_stats, models = ["MSTL_ARIMA_trend"], level=[95])
sf.plot(test, ml_forecast, models = ["LGBMRegressor"], level=[95])
```



